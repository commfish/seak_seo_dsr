model { 

#Bycatch Model and Discard Calculations =========================================
for (i in 1:Subd){
for (t in 1:15) {   #Derby years pre-1995
  logBy[i,t] ~ dunif(-10,10)
  tau.log.By[i,t] <- 1 / log(cv.ExpByc[i,t]*cv.ExpByc[i,t] + 1)
  ExpByc[i,t] ~ dlnorm(logBy[i,t],tau.log.By[i,t]) #T(0.01,)  #(50,)
  By[i,t]<-exp(logBy[i,t])
  #logD[i,t]<-log(max(1,By[i,t]*DE-Lnd.By[i,t]))
  logD[i,t]<-log(max(1,(By[i,t]*exp(derb.err[t]))-Lnd.By[i,t]))
  D[i,t]<-exp(logD[i,t])  
}
for (t in 16:N) {   #IFQ years 1995 on
  logBy[i,t] ~ dunif(-10,10) 
  tau.log.By[i,t] <- 1 / log(cv.ExpByc[i,t]*cv.ExpByc[i,t] + 1)
  ExpByc[i,t] ~ dlnorm(logBy[i,t],tau.log.By[i,t])T(0.01,)  #(50,)
  By[i,t]<-exp(logBy[i,t])
  logD[i,t]<-log(max(1,By[i,t]-Lnd.By[i,t]))
  D[i,t]<-exp(logD[i,t]) 
}
}

tau.log.derb<-1/(DEsd*DEsd+1)
for (t in 1:N){
  #tau.log.derb[t]<-1/(DEsd*DEsd+1)
  derb.err[t] <- depsilon[t]-(DEsd*DEsd/2)
  depsilon[t] ~ dnorm(Derby.Eff,tau.log.derb)T(Derby.Eff-0.3,Derby.Eff+0.3)
}

#Known Catches
for (i in 1:Subd){
for (t in 1:N){
  logKnC[i,t] ~ dunif(-10,10)
  KnC.obs[i,t] ~ dlnorm(logKnC[i,t], tau.log.KnC[i,t])  
  tau.log.KnC[i,t]<-1/log(cv.KnC[i,t]*cv.KnC[i,t]+1)  
  KnC[i,t]<-exp(logKnC[i,t])

#Total catches
  logC[i,t]<-log(D[i,t]+KnC[i,t])
  C[i,t]<-exp(logC[i,t])
}
}

## POPULATION MODEL...=====================================
#Process error 
logvar ~ dunif(-10,upvar) #dunif(-10,0.5)   #log variance prior = very restrictive to keep it small
sigma <- sqrt(exp(logvar)) 
tau.log.pe<-1/log(sigma*sigma+1)
for (t in 1:(N+Fu)) {
  PE[t]<-epsilon[t]-(sigma*sigma/2)
  epsilon[t] ~ dnorm(0,tau.log.pe)T(-0.1,0.1) #epsilon truncation = +/- 10% 
}

#Year 1
for (i in 1:Subd){
  K[i]<-exp(logK[i])
  logB[i,1] <-log(phi[i]*K[i]) 
  B[i,1]<-exp(logB[i,1])
  S[i,1]<-0
}

#Year 2 through N
for (i in 1:Subd){
for( t in 2:N )   #PT with Biomass starting in year 2
  { 
    logB[i,t]<-log(max(B[i,t-1]+(r[i]/p)*B[i,t-1]*(1-(B[i,t-1]/K[i])^p)-C[i,t-1],1)*exp(PE[t-1]))
    B[i,t]<-exp(logB[i,t])
    S[i,t]<-B[i,t-1]-B[i,t]+C[i,t]
  }
}

#surplus production 
for (i in 1:Subd){
for (t in 1:N){
    Surplus[i,t]<-(r[i]/p)*B[i,t]*(1-(B[i,t]/K[i])^p) 
}
}

#Biomass likelihoods...============================================
for (i in 1:Subd){
for (t in 1:30) {          #Submersible surveys
    use.cv1[i,t]<-sqrt(cv.B[i,t]*cv.B[i,t]+Tau1*Tau1)
    tau.log.B1[i,t] <- 1 / log(use.cv1[i,t]*use.cv1[i,t] + 1)
    B.obs[i,t] ~ dlnorm(logB[i,t],tau.log.B1[i,t])
    
    #PP.check.log
    subB.new[i,t] ~ dnorm(logB[i,t], tau.log.B1[i,t])  #draw from posterior
    subres.new[i,t] <- subB.new[i,t] - logB[i,t]
}

for (t in 31:N) {        #ROV surveys
    use.cv2[i,t]<-sqrt(cv.B[i,t]*cv.B[i,t]+Tau2*Tau2)
    tau.log.B2[i,t] <- 1 / log(use.cv2[i,t]*use.cv2[i,t] + 1)
    B.obs[i,t] ~ dlnorm(logB[i,t],tau.log.B2[i,t])
    
    #PP.check.log
    subB.new[i,t] ~ dnorm(logB[i,t], tau.log.B2[i,t])  #draw from posterior
    subres.new[i,t] <- subB.new[i,t] - logB[i,t]
}

for (t in 1:N){         #IPHC CPUE 
    use.cv3[i,t]<-sqrt(cv.sCPUE[i,t]*cv.sCPUE[i,t]+Tau3*Tau3)
    log.qsCPUEsubmean[i,t] <- log(qsCPUE[i] * B[i,t])
    tau.log.sCPUE[i,t] <- 1 / log(use.cv3[i,t]*use.cv3[i,t] + 1)
    sCPUE[i,t] ~ dlnorm(log.qsCPUEsubmean[i,t],tau.log.sCPUE[i,t])
    
    #PP.check.log
    res[i,t] <- log(B.obs[i,t]) - logB[i,t]  #observed - predicted
    iphcB.new[i,t] ~ dnorm(logB[i,t], tau.log.sCPUE[i,t])  #draw from posterior
    iphcres.new[i,t] <- iphcB.new[i,t] - logB[i,t]
}
}

#derived parameters for PP.check
for (i in 1:Subd) {
  fit[i] <- sum(res[i,])       #maintain subdisrict stratification
  subfit.new [i]<- sum(subres.new[i,])
  iphcfit.new [i]<- sum(iphcres.new[i,])
}

#PROJECTIONS:================================================================
#future catches and biomass...
  for (i in 1:Subd){
  for (t in (N+1):(N+Fu)){                              #this might not work because need the cv for B?
    FC[i,t]<-OFLABC*(max(0.01,B[i,t-1]-HarvStrat*B[i,t-1]))
  }
  }
  
  #gap year to deal with offset catches and biomass...
  for (i in 1:Subd){
    logB[i,N+1]<-log(max(B[i,N]+(r[i]/p)*B[i,N]*(1-(B[i,N]/K[i])^p)-C[i,N],1)*exp(epsilon[N]))
    B[i,N+1]<-exp(logB[i,N+1])
  }
  
  #rest of projection
  for (i in 1:Subd){
  for( t in (N+2):(N+Fu)){ 
    logB[i,t]<-log(max(B[i,t-1]+(r[i]/p)*B[i,t-1]*(1-(B[i,t-1]/K[i])^p)-FC[i,t-1],1)*exp(epsilon[t-1]))
    B[i,t]<-exp(logB[i,t])
  }
  }

#Subdistrict metrics==============================================================
for (i in 1:Subd){
    CBtoK[i]<-B[i,N]/K[i]
    FBtoK[i]<-B[i,N+Fu]/K[i]
    FBtoCB[i] <-  B[i,N+Fu]/B[i,N]
    MSY[i]<-r[i]*K[i]/((p+1)^((p+1)/p)) #r*K/4 for Schaefer
    Bmsy[i]<-0.4*K[i]  #0.5 for Schaefer
    Fmsy[i]<-MSY[i]/Bmsy[i]
    Hmsy[i]<-r[i]/(1+p) 
    Stock.Status[i]<-B[i,N]/(0.4*K[i])
    
    for (t in 1:N){
    CtoB[i,t]<-C[i,t]/B[i,t]
    }
}

#SEO calculations and summations
for (t in 1:(N+Fu)){
   Bseo[t]<-sum(B[,t])
}

for (t in 1:N){
  Cseo[t]<-sum(C[,t])
  KnCseo[t]<-sum(KnC[,t])
  Byseo[t]<-sum(By[,t])
  Dseo[t]<-sum(D[,t])
  S.seo[t]<-sum(S[,t])
  Surplus.seo[t]<-sum(Surplus[,t])
}

Stock.Status.SEO<-Bseo[N]/(0.4*Kseo)  
Kseo<-sum(K)
Bmsyseo<-sum(Bmsy)
Fmsyseo<-sum(MSY)/Bmsyseo
FBtoKseo<-Bseo[N+Fu]/Kseo
CBtoKseo<-Bseo[N]/Kseo

#subdistrict level priors =================================================
for (i in 1:Subd){
  #logphi[i] ~ dunif(-2.302585,-0.1053605) #dnorm(phi.hyp,0.2)T(0.2,0.95) #  #dnorm(0.6,0.4)T(0.1,0.9) #dunif(0.01,0.8)
  phi[i] ~ dbeta(1,1)T(0.01,0.99) #<- exp(logphi[i])
  r[i] ~ dbeta(rB1,rB2)T(0.0001,0.2) #dlnorm(log(R.hyp),0.5)T(0.0001,0.1) #dunif(0.01,0.4)
  logK[i] ~ dunif(7,11.5)  #capped at 162K, minimum based on ROV surveys
  logqs[i] ~ dunif(-10,20) #dunif(2,20)
  qsCPUE[i]<-exp(logqs[i])
  }

#priors/hyper priors ======================================================
p <- 0.18815 #0.18815 = Bmsy =0.4K; 1=Schaefer; 1e-08 ~ modfied fox
Tau1 ~ dunif(0.01,1)
Tau2 <- 0 #~ dunif(0.01,1)  #ROV years with no extra variance
Tau3 ~ dunif(0.01,1)

#Rhyper prior... 
#R.hyp ~ dlnorm(log(0.04),0.5)T(0.0001,0.1)   #T(0.0001,0.5)
R.hyp ~ dbeta(B1,B2)T(0.0001,0.2) #set to M=0.02,Z=0.05,AaM=17
eta<-exp(logeta)
logeta ~ dlogis(logn,1)T(-5,7.55) #cap of 10 gives max eta of 20K; 9.5 ~ 13K, 9.25~10K
                                  #7.55 ~ uniform shrinkage to 0.95% 
logn<-log(100)  #indicates shrinkage is uniformly distributed between 0 and 1
rB1<-R.hyp*eta
rB2<-(1-R.hyp)*eta

#projection prior

}